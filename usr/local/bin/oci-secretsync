#!/usr/bin/env bash
set -euo pipefail

MAP_FILE="${1:-/etc/oci-secretsync/map.csv}"
OCI="${OCI_CLI_BIN:-oci}"  # allow override
TMPDIR="/run/secrets/.tmp"
mkdir -p "$TMPDIR"
chmod 0700 "$TMPDIR"

# ensure instance principal auth (metadata tokens) is used by OCI CLI
export OCI_CLI_AUTH=instance_principal

read_csv() {
  local file="$1"
  grep -vE '^\s*$|^\s*#' "$file"
}

fetch_secret() {
  local ocid="$1"
  $OCI secrets secret-bundle get --secret-id "$ocid" --stage CURRENT \
    --query 'data."secret-bundle-content".content' --raw-output | base64 -d
}

atomic_write_if_changed() {
  local content="$1" path="$2" mode="$3"
  local tmp="$TMPDIR/.$(basename "$path").$$"
  umask 077
  printf '%s' "$content" > "$tmp"
  chmod "$mode" "$tmp"
  if [ ! -f "$path" ] || ! cmp -s "$tmp" "$path"; then
    mv -f "$tmp" "$path"
    return 0  # changed
  else
    rm -f "$tmp"
    return 1  # unchanged
  fi
}

signal_container() {
  local name="$1" sig="$2"
  [ -z "${name}" ] && return 0
  [ -z "${sig}" ] && return 0
  # Try docker, then podman
  if command -v docker >/dev/null 2>&1; then
    docker kill --signal "$sig" "$name" >/dev/null 2>&1 || true
  elif command -v podman >/dev/null 2>&1; then
    podman kill --signal "$sig" "$name" >/dev/null 2>&1 || true
  fi
}

changed_any=0
while IFS=, read -r ocid path mode container signal; do
  val="$(fetch_secret "$ocid")" || { echo "ERR: fetch $ocid failed"; continue; }
  if atomic_write_if_changed "$val" "$path" "$mode"; then
    echo "Updated $path from $ocid"
    changed_any=1
    signal_container "$container" "$signal"
  fi
done < <(read_csv "$MAP_FILE")

# Optional: return nonzero if changes occurred (for timers/logs)
[ "$changed_any" -eq 1 ] && exit 3 || exit 0
